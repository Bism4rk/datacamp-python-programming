from collections import Counter
from tokenize import tokenize

class Document:
    # Initialize a new Document instance
    def __init__(self, text):
        self.text = text
        # Pre tokenize the document with non-public tokenize method
        self.tokens = self._tokenize()
        # Pre tokenize the document with non-public count_words
        self.word_counts = self._count_words()

    def _tokenize(self):
        return tokenize(self.text)

    # Non-public method to tally document's word counts
    def _count_words(self):
        # Use collections.Counter to count the document's tokens
        return Counter(self.tokens)
    

def filter_word_counts(word_counts, prefix):
    """
    Filter word counts to only include words that start with a given prefix.
    
    Parameters:
    - word_counts: Counter object containing word counts.
    - prefix: The prefix to filter words by.
    
    Returns:
    A Counter object with filtered word counts.
    """
    return Counter({word: count for word, count in word_counts.items() if word.startswith(prefix)})

# The function code above was generated by the AI assistant to stop 'missing' errors from appearing.

# Define a SocialMedia class that is a child of the `Document class`
class SocialMedia(Document):
    def __init__(self, text):
        Document.__init__(self, text)
        self.hashtag_counts = self._count_hashtags()
        self.mention_counts = self._count_mentions()
        
    def _count_hashtags(self):
        # Filter attribute so only words starting with '#' remain
        return filter_word_counts(self.word_counts, first_char='#')      
    
    def _count_mentions(self):
        # Filter attribute so only words starting with '@' remain
        return filter_word_counts(self.word_counts, first_char='@')
    
'''
O código acima mostra como usar herança de classes para criar uma classe `SocialMedia` que herda de `Document`. A classe `SocialMedia` adiciona funcionalidades específicas para contar hashtags e menções, utilizando o método `filter_word_counts` para filtrar as contagens de palavras. Isso demonstra como a herança pode ser usada para estender a funcionalidade de uma classe base, mantendo o código organizado e reutilizável.
'''
